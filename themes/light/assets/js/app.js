(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{178:function(o,n,e){"use strict";e.r(n);var a=e(6),t=e(1),c=e(16),s=e(55),i=e(56),d=e(57),p=e(15),u=e(9),l=e(2);a.a.config.devtools=!0,a.a.config.performance=!0,a.a.use(t.b),a.a.use(c.a),a.a.use(s.a),a.a.use(i.a),[l.b,l.c,l.d,l.e,l.f,l.g,l.l,l.n,l.p,l.q,l.t,l.u,l.v,l.w,l.x,l.B].forEach(o=>{a.a.component(o.name,o)}),window.components.forEach(o=>{Object.keys(a.a.options.components).includes(o.name)||(u.c&&console.debug("Registering ".concat(o.name)),a.a.component(o.name,o))});const m=new a.a({name:"App",store:d.a,router:p.a,components:{},data:()=>({globalLoading:!1,pageComponent:!1}),mounted(){if(u.c&&console.log("App Mounted!"),!document.location.pathname.includes("/login")){const{$store:o}=this;Promise.all([o.dispatch("login",{username:window.username}),o.dispatch("getConfig")]).then(([o,n])=>{u.c&&console.log("App Loaded!");const e=new CustomEvent("medusa-config-loaded",{detail:n.main});window.dispatchEvent(e)}).catch(o=>{console.debug(o),alert("Unable to connect to Medusa!")})}}}).$mount("#vue-wrap");n.default=m}},[[178,1,0]]]);
//# sourceMappingURL=app.js.map